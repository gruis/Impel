<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
	<head>
		<meta http-equiv="content-type" content="text/html; charset=utf-8" />
		<meta name="generator" content="JsDoc Toolkit" />
		
		<title>Impel HTML 5 Javascript ORM - Impel</title>

        <link rel="stylesheet" type="text/css" href="/css/impel-unyui.css" />
        <link rel="stylesheet" type="text/css" href="/css/sh/shCore.css" />
        <link rel="stylesheet" type="text/css" href="/css/sh/shThemeDjango.css" />
        <script type="text/javascript" src="/js/sh/shCore.js"></script>
        <script type="text/javascript" src="/js/sh/shBrushJScript.js"></script>
        <script type="text/javascript" src="/js/sh/shBrushJScript.js"></script>
        <script type="text/javascript">SyntaxHighlighter.defaults["toolbar"]=true; SyntaxHighlighter.defaults["tab-size"]=2; SyntaxHighlighter.all();</script>

	</head>

	<body>
	    <div id="wrapper">
<!-- ============================== header ================================= -->	
		<!-- begin static/header.html -->
		<div id="header">
</div>
		<!-- end static/header.html -->

<!-- ============================== classes index ============================ -->
		<div id="index">
			<!-- begin publish.classesIndex -->
			<div align="center"><a href="../index.html">Class Index</a>
| <a href="../files.html">File Index</a></div>
<hr />
<h2>Classes</h2>
<ul class="classList">
	
	<li><i><a href="../symbols/_global_.html">_global_</a></i></li>
	
	<li><a href="../symbols/CritConstants.html">CritConstants</a></li>
	
	<li><a href="../symbols/Criteria.html">Criteria</a></li>
	
	<li><a href="../symbols/Criterion.html">Criterion</a></li>
	
	<li><a href="../symbols/Impel.html">Impel</a></li>
	
	<li><a href="../symbols/ImpelClass.html">ImpelClass</a></li>
	
	<li><a href="../symbols/ImpelPeer.html">ImpelPeer</a></li>
	
	<li><a href="../symbols/ResultSet.html">ResultSet</a></li>
	
	<li><a href="../symbols/String.html">String</a></li>
	
</ul>
<hr />
			<!-- end publish.classesIndex -->
		</div>
		
		<div id="content">
<!-- ============================== class title ============================ -->
			<h1 class="classTitle">
				
				Class Impel
			</h1>

<!-- ============================== class summary ========================== -->			
			<p class="description">
				
			
				Impel
				
				
					<br /><i>Defined in: </i> <a href="../symbols/src/impel-source.js.html">impel-source.js</a>.
				
			</p>

<!-- ============================== constructor summary ==================== -->			
			
			<table class="summaryTable" cellspacing="0" summary="A summary of the constructor documented in the class Impel.">
				<caption>Class Summary</caption>
				<thead>
					<tr>
						<th scope="col">Constructor Attributes</th>
						<th scope="col">Constructor Name and Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td class="attributes">&nbsp;</td>
						<td class="nameDescription" >
							<div class="fixedFont">
								<b><a href="../symbols/Impel.html">Impel</a></b>()
							</div>
							<div class="description"><p>Impel is a Javascript to HTML 5 Object Relational Mapping Library</p>
 
 <h2>Issues</h2>
 <ul>
  <li>It is very likely that more than two connected left joins e.g.</div>
						</td>
					</tr>
				</tbody>
			</table>
			

<!-- ============================== properties summary ===================== -->
			
				
				
				<table class="summaryTable" cellspacing="0" summary="A summary of the fields documented in the class Impel.">
					<caption>Field Summary</caption>
					<thead>
						<tr>
							<th scope="col">Field Attributes</th>
							<th scope="col">Field Name and Description</th>
						</tr>
					</thead>
					<tbody>
					
						<tr>
							<td class="attributes">&lt;static&gt; &nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont">
								Impel.<b><a href="../symbols/Impel.html#.db">db</a></b>
								</div>
								<div class="description">The HTML 5 SQL database to execute queries against</div>
							</td>
						</tr>
					
					</tbody>
				</table>
				
				
				
			

<!-- ============================== methods summary ======================== -->
			
<!-- ============================== events summary ======================== -->
			

<!-- ============================== constructor details ==================== -->		
			
			<div class="details"><a name="constructor"> </a>
				<div class="sectionTitle">
					Class Detail
				</div>
				
				<div class="fixedFont">
						<b>Impel</b>()
				</div>
				
				<div class="description">
					<p>Impel is a Javascript to HTML 5 Object Relational Mapping Library</p>
 
 <h2>Issues</h2>
 <ul>
  <li>It is very likely that more than two connected left joins e.g., a LEFT JOIN b LEFT JOIN c LEFT JOIN d, will result in incorrect SQL</li>
  <li>There is no clear definition as to when a transaction should be rolled back</li>
  <li>Peers and Classes must be within the top level of the window, e.g., window[AbcPeer]</li>
  <li>It is assumed that each object and each table contains an attribute/column named id that is the PRIMARY KEY  and it is AUTO INCREMENT</li>
  <li>Auto generated created_at column value can be overridden, but updated_at cannot</li>
  </ul>

 <h2>Missing Features</h2>
 <ul>
  <li>It is not possible to call save once on an array of objects and have them all saved at once.</li>
  <li>An API that exactly mirrors PHP's Propel</li>
  <li>Auto create of database and SQL tables</li>
 </ul>



<h2>Using Impel</h2>
<p>Impel is a ....</p>
<p>Impel makes it easy to ... </p>
<h3>Define the model</h3>
<pre class="code brush: js;">
  var Card = new Class({
        Extends    : ImpelClass,
        peer_class : "CardPeer",
        toString   : function(){
                       return this.getName() + " of " + this.getSuit();
                     }
    });

  var CardPeer = new ImpelPeer({
         'columns'      : { 'id'    : 'card.id',    'suit' : 'card.suit', 
                            'value' : 'card.value', 'name' : 'card.name'},
         'table'        : 'card',
         'base_object'  : 'Card'
    });

 var Stack = new Class({
      Extends      : ImpelClass,
      peer_class   : "StackPeer",
      toString     : function(){
                       return this.getName();
                     }
    });

  var StackPeer = new ImpelPeer({
        'columns'      : { 'id'          : 'stack.id',         'name'       : 'stack.name', 
                           'created_at'  : 'stack.created_at', 'updated_at' : 'stack.updated_at'},
        'table'        : 'stack',
        'base_object'  :  'Stack'
    });

  var CardStack = new Class({
       Extends: ImpelClass,
       peer_class: "CardStackPeer",
       toString: function(){
         return this.getId() + ":" + this.getCardId() + "-" + this.getStackId();
       }
     });

  var CardStackPeer = new ImpelPeer({
          'columns'      : {'id' : 'card_stack.id', 'stack_id'  : 'card_stack.stack_id', 
                                                    'card_id'   : 'card_stack.card_id'},
          'table'        : 'card_stack',
          'base_object'  : 'CardStack'
     });
</pre>
<h3>Define the relationships between the classes</h3>
<pre class="code brush: js;">
    CardPeer.hasManyThrough("StackPeer::id","CardStackPeer::card_id","CardStackPeer::stack_id");
    StackPeer.hasManyThrough("CardPeer::id","CardStackPeer::stack_id","CardStackPeer::card_id");
</pre>

<h3>Use the objects in your code</h3>
Instantiate the objects as you normally would and use the automatically
created get and set methods to access the attributes of the objects.

<pre class="code brush: js;">
 var cards  = [];

 cards[0]   = new Card();
   cards[0].setSuit("hearts");
   cards[0].setName("9");
   cards[0].setValue(9);

 cards[1]   = new Card();
   cards[1].setSuit("hearts");
   cards[1].setName("10");
   cards[1].setValue(10);

 cards[2]   = new Card();
   cards[2].setSuit("hearts");
   cards[2].setName("Jack");
   cards[2].setValue(11);

 cards[3]   = new Card();
   cards[3].setSuit("hearts");
   cards[3].setName("Queen");
   cards[3].setValue(12);

 cards[4]   = new Card();
   cards[4].setSuit("hearts");
   cards[4].setName("King");
   cards[4].setValue(13);

 var sFlush   = new Stack();
       sFlush.setName('Straight Flush');
</pre>

<h3>Associate objects with one another </h3>    
Objects that are related to one another through one-to-many and 
many-to-many relationships use automatically generated add and get 
methods rather than set and get methods

<pre class="code brush: js;">
   sFlush.addCard(cards[0]);
   sFlush.addCard(cards[1]);
   sFlush.addCard(cards[2]);
   sFlush.addCard(cards[3]);
   sFlush.addCard(cards[4]);
</pre>

<h3>Persist objects via the HTML 5 database</h3>
If objects are associated with one another you only need to call save 
on one of them. Impel will automatially save any related objects. Impel 
is also smart enough to figure out when an UPDATE is required instead 
of an INSERT.

The HTML 5 specification requires that the HTML database be asynchronous, 
so Impel is as well. When you call save on an object nothing will be 
returned, but a callbacks will be used to signal if the save was 
successful or not. You can safely call save without a callback if you like.

<pre class="code brush: js;">
 sFlush.save(
   function(){ 
     notify.show("Saved "+sFlush.getName() + " with " + sFlush.getCards().length + " cards.");
   },
   function(error){ 
     notify.error("Failed to save "+sFlush.getName() + " with " + 
                      sFlush.getCards().length + " cards." + error);
   }
 );
</pre>
<h3>Retrieve objects from the HTML 5 database</h3>
To retrieve specific objects from the database first instantiate a Criteria
object and use it to define exactly which object you want to retrieve. Then
use that objects associated ImpelPeer to retrieve it.

<pre class="code brush: js;">
 var c = new Criteria();
    c.add("StackPeer::name","Straight Flush");
 CardPeer.doSelectJoinAll(c, function(cards){ 
                                 cards.each(function(card){
                                     display(card);
                                 });
                             });
</pre>
					<br /><i>Author: </i>Caleb Crane - Simulacre Publishing LLC.
				</div>
				
				
				
				
					
					
					
					
					
					
						<dl class="detailList">
						<dt class="heading">Requires:</dt>
						
							<dd>MooTools</dd>
						
						</dl>
					
					
						<dl class="detailList">
						<dt class="heading">See:</dt>
						
							<dd><a href="../symbols/ImpelClass.html#save">ImpelClass#save</a></dd>
						
							<dd><a href="../symbols/ImpelPeer.html#doSelectJoinAll">ImpelPeer#doSelectJoinAll</a></dd>
						
							<dd><a href="../symbols/ImpelPeer.html#doSelectOneJoinAll">ImpelPeer#doSelectOneJoinAll</a></dd>
						
							<dd><a href="../symbols/ImpelPeer.html#doSelect">ImpelPeer#doSelect</a></dd>
						
							<dd><a href="../symbols/ImpelPeer.html#doSelectJoinAllExcept">ImpelPeer#doSelectJoinAllExcept</a></dd>
						
							<dd><a href="../symbols/ImpelPeer.html#hasMany">ImpelPeer#hasMany</a></dd>
						
							<dd><a href="../symbols/ImpelPeer.html#hasManyThrough">ImpelPeer#hasManyThrough</a></dd>
						
						</dl>
					

			</div>
			

<!-- ============================== field details ========================== -->		
			
				<div class="sectionTitle">
					Field Detail
				</div>
				
					<a name=".db"> </a>
					<div class="fixedFont">&lt;static&gt; 
					
					<span class="light">{database}</span>
					<span class="light">Impel.</span><b>db</b>
					
					</div>
					<div class="description">
						The HTML 5 SQL database to execute queries against
						
						
					</div>
					
					

						
						
						
						

					
				
			

<!-- ============================== method details ========================= -->		
			
			
<!-- ============================== event details ========================= -->		
			
			
			<hr />
		</div>

            <div class="push">&nbsp;</div>
         </div> <!-- end of wrapper -->
         <div id="footer"
        	<div class="fineprint" style="clear:both">
        	    <a class="logo" href="http://www.simulacre.org/"> </a>
        	</div>
    	</div>
    	<script type="text/javascript">
        var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
        document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
        </script>
        <script type="text/javascript">
        try {
        var pageTracker = _gat._getTracker("UA-1727701-7");
        pageTracker._trackPageview();
        } catch(err) {}</script>
	</body>
</html>
