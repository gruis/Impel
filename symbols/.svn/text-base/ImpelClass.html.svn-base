<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
	<head>
		<meta http-equiv="content-type" content="text/html; charset=utf-8" />
		<meta name="generator" content="JsDoc Toolkit" />
		
		<title>Impel HTML 5 Javascript ORM - ImpelClass</title>

        <link rel="stylesheet" type="text/css" href="/css/impel-unyui.css" />
        <link rel="stylesheet" type="text/css" href="/css/sh/shCore.css" />
        <link rel="stylesheet" type="text/css" href="/css/sh/shThemeDjango.css" />
        <script type="text/javascript" src="/js/sh/shCore.js"></script>
        <script type="text/javascript" src="/js/sh/shBrushJScript.js"></script>
        <script type="text/javascript" src="/js/sh/shBrushJScript.js"></script>
        <script type="text/javascript">SyntaxHighlighter.defaults["toolbar"]=true; SyntaxHighlighter.defaults["tab-size"]=2; SyntaxHighlighter.all();</script>

	</head>

	<body>
	    <div id="wrapper">
<!-- ============================== header ================================= -->	
		<!-- begin static/header.html -->
		<div id="header">
</div>
		<!-- end static/header.html -->

<!-- ============================== classes index ============================ -->
		<div id="index">
			<!-- begin publish.classesIndex -->
			<div align="center"><a href="../index.html">Class Index</a>
| <a href="../files.html">File Index</a></div>
<hr />
<h2>Classes</h2>
<ul class="classList">
	
	<li><i><a href="../symbols/_global_.html">_global_</a></i></li>
	
	<li><a href="../symbols/CritConstants.html">CritConstants</a></li>
	
	<li><a href="../symbols/Criteria.html">Criteria</a></li>
	
	<li><a href="../symbols/Criterion.html">Criterion</a></li>
	
	<li><a href="../symbols/Impel.html">Impel</a></li>
	
	<li><a href="../symbols/ImpelClass.html">ImpelClass</a></li>
	
	<li><a href="../symbols/ImpelPeer.html">ImpelPeer</a></li>
	
	<li><a href="../symbols/ResultSet.html">ResultSet</a></li>
	
	<li><a href="../symbols/String.html">String</a></li>
	
</ul>
<hr />
			<!-- end publish.classesIndex -->
		</div>
		
		<div id="content">
<!-- ============================== class title ============================ -->
			<h1 class="classTitle">
				
				Class ImpelClass
			</h1>

<!-- ============================== class summary ========================== -->			
			<p class="description">
				
			
				ImpelClass
				
				
					<br /><i>Defined in: </i> <a href="../symbols/src/impel-source.js.html">impel-source.js</a>.
				
			</p>

<!-- ============================== constructor summary ==================== -->			
			
			<table class="summaryTable" cellspacing="0" summary="A summary of the constructor documented in the class ImpelClass.">
				<caption>Class Summary</caption>
				<thead>
					<tr>
						<th scope="col">Constructor Attributes</th>
						<th scope="col">Constructor Name and Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td class="attributes">&nbsp;</td>
						<td class="nameDescription" >
							<div class="fixedFont">
								<b><a href="../symbols/ImpelClass.html">ImpelClass</a></b>(<span class="param">options</span>, <span class="param">events</span>)
							</div>
							<div class="description">Any class of objects that is to be persisted via Impel must Extend the ImpelClass, contain a 'peer_class' attribute,
and be within the scope of window.</div>
						</td>
					</tr>
				</tbody>
			</table>
			

<!-- ============================== properties summary ===================== -->
			

<!-- ============================== methods summary ======================== -->
			
				
				
				<table class="summaryTable" cellspacing="0" summary="A summary of the methods documented in the class ImpelClass.">
					<caption>Method Summary</caption>
					<thead>
						<tr>
							<th scope="col">Method Attributes</th>
							<th scope="col">Method Name and Description</th>
						</tr>
					</thead>
					<tbody>
					
						<tr>
							<td class="attributes">&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><b><a href="../symbols/ImpelClass.html#dbug">dbug</a></b>()
								</div>
								<div class="description">Log the this objects attributes to the console.</div>
							</td>
						</tr>
					
						<tr>
							<td class="attributes">&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><b><a href="../symbols/ImpelClass.html#generateDocs">generateDocs</a></b>()
								</div>
								<div class="description">Generate a documentation page for this object detailing all of it's get and set methods, which are automatically generated
by the peer.</div>
							</td>
						</tr>
					
						<tr>
							<td class="attributes">&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><b><a href="../symbols/ImpelClass.html#getDbug">getDbug</a></b>()
								</div>
								<div class="description">Generate a string representing this object's attributes and their current values.</div>
							</td>
						</tr>
					
						<tr>
							<td class="attributes">&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><b><a href="../symbols/ImpelClass.html#getPeer">getPeer</a></b>()
								</div>
								<div class="description">Retrieve the Peer object from memory.</div>
							</td>
						</tr>
					
						<tr>
							<td class="attributes">&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><b><a href="../symbols/ImpelClass.html#hydrate">hydrate</a></b>(<span class="param">attrs</span>)
								</div>
								<div class="description">Convert an array of columns:values retrieved from the database into attributes of this object.</div>
							</td>
						</tr>
					
						<tr>
							<td class="attributes">&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><b><a href="../symbols/ImpelClass.html#isModified">isModified</a></b>()
								</div>
								<div class="description">Has this object been modified since it was last retreived from the database</div>
							</td>
						</tr>
					
						<tr>
							<td class="attributes">&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><b><a href="../symbols/ImpelClass.html#isNew">isNew</a></b>(<span class="param">boolean</span>)
								</div>
								<div class="description">Set this object to new or retireve its current state.</div>
							</td>
						</tr>
					
						<tr>
							<td class="attributes">&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><b><a href="../symbols/ImpelClass.html#remove">remove</a></b>(<span class="param">s_callback({Object} ResultSet)</span>, <span class="param">f_callback({String} error)</span>)
								</div>
								<div class="description">Remove this object from the database
<p>Tell the Peer that this object is being removed, so that it cannot be saved by another process, delete it and then mark it as deleted, so that it cannot be used.</div>
							</td>
						</tr>
					
						<tr>
							<td class="attributes">&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><b><a href="../symbols/ImpelClass.html#removed">removed</a></b>()
								</div>
								<div class="description">Mark this object as having been deleted, so that it cannot be saved or updated.</div>
							</td>
						</tr>
					
						<tr>
							<td class="attributes">&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><b><a href="../symbols/ImpelClass.html#save">save</a></b>(<span class="param">s_callback({Object} ResultSet)</span>, <span class="param">f_callback({String} error)</span>)
								</div>
								<div class="description">Persist this object in the database or update the appropriate database row to reflect changes in this object since it was last instantiated.</div>
							</td>
						</tr>
					
						<tr>
							<td class="attributes">&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><b><a href="../symbols/ImpelClass.html#saveMtoMObjsandLink">saveMtoMObjsandLink</a></b>(<span class="param">s_callback(object ResultSet)</span>, <span class="param">f_callback(string error)</span>, <span class="param">wasNew</span>)
								</div>
								<div class="description">Save any related many-to-many objects along with the link between this object and them.</div>
							</td>
						</tr>
					
						<tr>
							<td class="attributes">&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><b><a href="../symbols/ImpelClass.html#saveOneToManyObjs">saveOneToManyObjs</a></b>(<span class="param">s_callback(object ResultSet)</span>, <span class="param">f_callback(string error)</span>)
								</div>
								<div class="description">Save any objects that have a one-to-many relationship with this one.</div>
							</td>
						</tr>
					
						<tr>
							<td class="attributes">&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><b><a href="../symbols/ImpelClass.html#saveOnlyMe">saveOnlyMe</a></b>(<span class="param">s_callback(object ResultSet)</span>, <span class="param">f_callback(string error)</span>)
								</div>
								<div class="description">Save this object, but don't bother saving any related objects.</div>
							</td>
						</tr>
					
						<tr>
							<td class="attributes">&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><b><a href="../symbols/ImpelClass.html#setAttributes">setAttributes</a></b>(<span class="param">attrs</span>)
								</div>
								<div class="description">Take a list of JSON objects and convert it into attributes for this object.</div>
							</td>
						</tr>
					
						<tr>
							<td class="attributes">&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><b><a href="../symbols/ImpelClass.html#setOptions">setOptions</a></b>(<span class="param">options</span>)
								</div>
								<div class="description">This is a vestigial method that should be removed as it exists verbatim in the parent class.</div>
							</td>
						</tr>
					
						<tr>
							<td class="attributes">&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><b><a href="../symbols/ImpelClass.html#updateIdFromRS">updateIdFromRS</a></b>(<span class="param">rs</span>)
								</div>
								<div class="description">After the base peer saves the object to the database it wil call this method on the saved object with 
an SQLResultSet, that *should* contain the id of the newly inserted row.</div>
							</td>
						</tr>
					
					</tbody>
				</table>
				
				
				
			
<!-- ============================== events summary ======================== -->
			

<!-- ============================== constructor details ==================== -->		
			
			<div class="details"><a name="constructor"> </a>
				<div class="sectionTitle">
					Class Detail
				</div>
				
				<div class="fixedFont">
						<b>ImpelClass</b>(<span class="param">options</span>, <span class="param">events</span>)
				</div>
				
				<div class="description">
					Any class of objects that is to be persisted via Impel must Extend the ImpelClass, contain a 'peer_class' attribute,
and be within the scope of window. 

<p>Your classes can have any attributes or methods that you want, but only attributes that are defined in the column 
object of the associated peer class will be persisted. If you define a toString method the result of that
method will be used when your object is used in String context.</p>

<p>Every instance of ImpelClass and it's inheritors must have an associated and instantiated ImpelPeer. The Peer object
defines the attributes ImpelClass that will be persisted along with where in the database they will be saved.</p>

<ul>
 <lh><strong>Important Notes:</strong></lh>
 <li>The ImpelPeer object must be declared after the ImpelClass class.</li>
 <li>Unlike ImpelPeer, ImpelClass should not be directly instantiated. Instead you should create another class that extends ImpelClass</li>
 <li>Define the member attributes of this class, that will be persisted, through an associated instance of ImpelPeer.</li>
 <li>Member attributes defined via an ImpelPeer will automatically be accessible by get and set methods. If you want to override the getters
     and setters then define one ImpelClass along with an ImpelPeer then define another ImpelClass that extends the first. If you don't your
     customizations will be overwritten.</li>
 <li>You must define the peer_class member manually.</li>
</ul>
					
				</div>
				
				
				
				<pre class="code brush: js;">     var Card = new Class({
                          Extends       : ImpelClass,
                          peer_class    : "CardPeer",
                          toString      : function(){
                                            return this.getKanji();
                                          }
                });

     var CardPeer = new ImpelPeer({
                          'columns'     :   { 
                                              'id'          : 'card.id', 
                                              'kanji'       : 'card.kanji', 
                                              'hatsuon'     : 'card.hatsuon',
                                              'meaning'     : 'card.meaning', 
                                              'level'       : 'card.level', 
                                              'created_at'  : 'card.created_at',
                                              'updated_at'  : 'card.updated_at'
                                             },
                          'table'         : 'card',
                          'base_object'   : 'Card'
                   });</pre>
				
				
				
				
					
						<dl class="detailList">
						<dt class="heading">Parameters:</dt>
						
							<dt>
								<span class="light fixedFont">{Object}</span>  <b>options</b>
								
							</dt>
								<dd>Options to bind to this ImpelClass object. Currently no configurable Options are supported by this class.</dd>
						
							<dt>
								<span class="light fixedFont">{Object}</span>  <b>events</b>
								
							</dt>
								<dd>Events to bind to to this ImpelClass object. Currently no Events are fired by this class</dd>
						
						</dl>
					
					
					
					
					
					
					
						<dl class="detailList">
						<dt class="heading">See:</dt>
						
							<dd><a href="../symbols/ImpelPeer.html">ImpelPeer</a></dd>
						
						</dl>
					

			</div>
			

<!-- ============================== field details ========================== -->		
			

<!-- ============================== method details ========================= -->		
			
				<div class="sectionTitle">
					Method Detail
				</div>
				
					<a name="dbug"> </a>
					<div class="fixedFont">
					
					
					<b>dbug</b>()
					
					</div>
					<div class="description">
						Log the this objects attributes to the console.
						
						
					</div>
					
					
					
						
						
						
						
						
						
						

					<hr />
				
					<a name="generateDocs"> </a>
					<div class="fixedFont">
					
					<span class="light">{<a href="../symbols/String.html">String</a>}</span>
					<b>generateDocs</b>()
					
					</div>
					<div class="description">
						Generate a documentation page for this object detailing all of it's get and set methods, which are automatically generated
by the peer. This method should only be called on a new object.
<p><strong>Important Note:</strong> The documentation does include the method definitons, but they cannot be copied verbatim 
into your code and substituted for the actual automatically generated methods. </p>
						
						
					</div>
					
					
					
						
						
						
						
						
							<dl class="detailList">
							<dt class="heading">Returns:</dt>
							
								<dd><span class="light fixedFont">{<a href="../symbols/String.html">String</a>}</span> A jsdoc-toolkit formatted string of declarations

<pre class="code brush: js;">
 /&#x2a;&#x2a;
  * @param   {mixed} v The value to set the corresponding internal meaning attribute
  * @returns {undefined}
  &#x2a;/
  setMeaning : function (v) { 
                 this.attributes[attr] = v;
                 this.modified_columns.push(attr);
               }

 /&#x2a;&#x2a;
  * Retrieve the corresponding internal level attribute
  * @returns {mixed} The corresponding internal attribute
  &#x2a;/
  getLevel : function () { 
                 return this.attributes[attr]; 
              }

 /&#x2a;&#x2a;
  * Add an associated 1-m or m-m Stack object to object 
  * @returns {undefined} 
  &#x2a;/
  addStack : function (obj) {
                if(this.attributes[holder] == null)
                   this.attributes[holder] = [];
                if(this.attributes[holder][obj.getId()] == null)
                  this.attributes[holder].push(obj);
             }

 /&#x2a;&#x2a;
  * Retrieve the associated 1-m or m-m Stack objects from this object's internal 
  * storage; Not the database.
  * @returns {Stack[]} An array of the associated objects 
  &#x2a;/
  getStacks : function () { 
                 return this.attributes[holder] 
               }
</pre></dd>
							
							</dl>
						
						
						
							<dl class="detailList">
							<dt class="heading">See:</dt>
							
								<dd><a href="../symbols/ImpelPeer.html#generateDocs">ImpelPeer#generateDocs</a></dd>
							
							</dl>
						

					<hr />
				
					<a name="getDbug"> </a>
					<div class="fixedFont">
					
					
					<b>getDbug</b>()
					
					</div>
					<div class="description">
						Generate a string representing this object's attributes and their current values.
						
						
					</div>
					
					
					
						
						
						
						
						
						
						

					<hr />
				
					<a name="getPeer"> </a>
					<div class="fixedFont">
					
					
					<b>getPeer</b>()
					
					</div>
					<div class="description">
						Retrieve the Peer object from memory.
						
						
					</div>
					
					
					
						
						
						
						
						
						
						

					<hr />
				
					<a name="hydrate"> </a>
					<div class="fixedFont">
					
					
					<b>hydrate</b>(<span class="param">attrs</span>)
					
					</div>
					<div class="description">
						Convert an array of columns:values retrieved from the database into attributes of this object.
<p>When a SELECT statement is executed on two tables that contain a column with the same name the column name will be prepended with a the table name and a period, e.g., [table.]column.
We need to strip off that table name specifier and use only the column name as an attribute. It is also possibe that the results of the query could include columns that are not a 
part of this class, so we check if the table matches our peer's table name before using the column.</p>
						
						
					</div>
					
					
					
						
							<dl class="detailList">
							<dt class="heading">Parameters:</dt>
							
								<dt>
									<span class="light fixedFont">{Object}</span> <b>attrs</b>
									
								</dt>
								<dd>- The column/value pairs retrieved from the database</dd>
							
							</dl>
						
						
						
						
						
						
						

					<hr />
				
					<a name="isModified"> </a>
					<div class="fixedFont">
					
					
					<b>isModified</b>()
					
					</div>
					<div class="description">
						Has this object been modified since it was last retreived from the database
						
						
					</div>
					
					
					
						
						
						
						
						
						
						

					<hr />
				
					<a name="isNew"> </a>
					<div class="fixedFont">
					
					
					<b>isNew</b>(<span class="param">boolean</span>)
					
					</div>
					<div class="description">
						Set this object to new or retireve its current state.
If only javascript class methods could be made private ....
						
						
					</div>
					
					
					
						
							<dl class="detailList">
							<dt class="heading">Parameters:</dt>
							
								<dt>
									<b>boolean</b>
									
								</dt>
								<dd>b - If b is defined and is a boolean this objects new status will be set to the value of b.</dd>
							
							</dl>
						
						
						
						
						
						
						

					<hr />
				
					<a name="remove"> </a>
					<div class="fixedFont">
					
					
					<b>remove</b>(<span class="param">s_callback({Object} ResultSet)</span>, <span class="param">f_callback({String} error)</span>)
					
					</div>
					<div class="description">
						Remove this object from the database
<p>Tell the Peer that this object is being removed, so that it cannot be saved by another process, delete it and then mark it as deleted, so that it cannot be used.
The object still exists in memory though ...</p>
						
						
					</div>
					
					
					
						
							<dl class="detailList">
							<dt class="heading">Parameters:</dt>
							
								<dt>
									<span class="light fixedFont">{function}</span> <b>s_callback({Object} ResultSet)</b>
									<i>Optional, Default: null</i>
								</dt>
								<dd>- The callback to use if the remove is succesful</dd>
							
								<dt>
									<span class="light fixedFont">{function}</span> <b>f_callback({String} error)</b>
									<i>Optional, Default: null</i>
								</dt>
								<dd>- The callback to use if the remove is not successful</dd>
							
							</dl>
						
						
						
						
						
						
						

					<hr />
				
					<a name="removed"> </a>
					<div class="fixedFont">
					
					
					<b>removed</b>()
					
					</div>
					<div class="description">
						Mark this object as having been deleted, so that it cannot be saved or updated. This, hopefully, eliminates at least one class of race condition.
						
						
					</div>
					
					
					
						
						
						
						
						
						
						

					<hr />
				
					<a name="save"> </a>
					<div class="fixedFont">
					
					
					<b>save</b>(<span class="param">s_callback({Object} ResultSet)</span>, <span class="param">f_callback({String} error)</span>)
					
					</div>
					<div class="description">
						Persist this object in the database or update the appropriate database row to reflect changes in this object since it was last instantiated.
<p>If there are other objects associated with this one via 1-m and m-m relationships they will be automatically saved/updated if necessary.</p>
<p>If the object contains an updated_at or created_at member they will automatically be set to the appropriate time</p>
						
						
					</div>
					
					
					
						
							<dl class="detailList">
							<dt class="heading">Parameters:</dt>
							
								<dt>
									<span class="light fixedFont">{function}</span> <b>s_callback({Object} ResultSet)</b>
									<i>Optional, Default: null</i>
								</dt>
								<dd>- The callback to use if the save is succesful</dd>
							
								<dt>
									<span class="light fixedFont">{function}</span> <b>f_callback({String} error)</b>
									<i>Optional, Default: null</i>
								</dt>
								<dd>- The callback to use if the save is not successful</dd>
							
							</dl>
						
						
						
						
						
						
						
							<dl class="detailList">
							<dt class="heading">See:</dt>
							
								<dd><a href="../symbols/ImpelClass.html#saveOnlyMe">ImpelClass#saveOnlyMe</a></dd>
							
							</dl>
						

					<hr />
				
					<a name="saveMtoMObjsandLink"> </a>
					<div class="fixedFont">
					
					
					<b>saveMtoMObjsandLink</b>(<span class="param">s_callback(object ResultSet)</span>, <span class="param">f_callback(string error)</span>, <span class="param">wasNew</span>)
					
					</div>
					<div class="description">
						Save any related many-to-many objects along with the link between this object and them.
<p>If this object was new then there is no possibility that the joining table has an entry for this object and
it's related objects, so we must save the link. The related object may not have been previously saved though.
If the related object is new then it won't have an id so we can't save the connecting object until after 
we've saved it.</p>

<p>If this object was not new then it is possible that a link already exists in the database between it and its
related objects. We have to check for that link before creating new ones.</p>
						
						
					</div>
					
					
					
						
							<dl class="detailList">
							<dt class="heading">Parameters:</dt>
							
								<dt>
									<span class="light fixedFont">{function}</span> <b>s_callback(object ResultSet)</b>
									<i>Optional, Default: null</i>
								</dt>
								<dd>- The callback to use if the save is succesful</dd>
							
								<dt>
									<span class="light fixedFont">{function}</span> <b>f_callback(string error)</b>
									<i>Optional, Default: null</i>
								</dt>
								<dd>- The callback to use if the save is not successful</dd>
							
								<dt>
									<span class="light fixedFont">{boolean}</span> <b>wasNew</b>
									
								</dt>
								<dd>- Inidicates that this object was new before calling this method. If this parameter is not accurate then the database could become inconsistent</dd>
							
							</dl>
						
						
						
						
						
						
						
							<dl class="detailList">
							<dt class="heading">See:</dt>
							
								<dd><a href="../symbols/ImpelClass.html#saveOneToManyObjs">ImpelClass#saveOneToManyObjs</a></dd>
							
							</dl>
						

					<hr />
				
					<a name="saveOneToManyObjs"> </a>
					<div class="fixedFont">
					
					
					<b>saveOneToManyObjs</b>(<span class="param">s_callback(object ResultSet)</span>, <span class="param">f_callback(string error)</span>)
					
					</div>
					<div class="description">
						Save any objects that have a one-to-many relationship with this one.
<p>Use the Peer's list of one-to-many relationships to access this objects get method for one-to-many objects.
Iterate over the list of objects and update any of them that don't have our id, i.e. aren't recorded as 
being related to this object.</p>
						
						
					</div>
					
					
					
						
							<dl class="detailList">
							<dt class="heading">Parameters:</dt>
							
								<dt>
									<span class="light fixedFont">{function}</span> <b>s_callback(object ResultSet)</b>
									<i>Optional, Default: null</i>
								</dt>
								<dd>- The callback to use if the save is succesful</dd>
							
								<dt>
									<span class="light fixedFont">{function}</span> <b>f_callback(string error)</b>
									<i>Optional, Default: null</i>
								</dt>
								<dd>- The callback to use if the save is not successful</dd>
							
							</dl>
						
						
						
						
						
						
						
							<dl class="detailList">
							<dt class="heading">See:</dt>
							
								<dd>ImpelClass.saveMtoMObjsandLink</dd>
							
							</dl>
						

					<hr />
				
					<a name="saveOnlyMe"> </a>
					<div class="fixedFont">
					
					
					<b>saveOnlyMe</b>(<span class="param">s_callback(object ResultSet)</span>, <span class="param">f_callback(string error)</span>)
					
					</div>
					<div class="description">
						Save this object, but don't bother saving any related objects. 
<p>If the object is new use an INSERT statement, but if it is not use an UPDATE statement. Also don't bother with
attributes that haven't been set.</p>

<p>If the object contains an updated_at or created_at member they will automatically be set to the appropriate time</p>
						
						
					</div>
					
					
					
						
							<dl class="detailList">
							<dt class="heading">Parameters:</dt>
							
								<dt>
									<span class="light fixedFont">{function}</span> <b>s_callback(object ResultSet)</b>
									<i>Optional, Default: null</i>
								</dt>
								<dd>- The callback to use if the save is succesful</dd>
							
								<dt>
									<span class="light fixedFont">{function}</span> <b>f_callback(string error)</b>
									<i>Optional, Default: null</i>
								</dt>
								<dd>- The callback to use if the save is not successful</dd>
							
							</dl>
						
						
						
						
						
						
						
							<dl class="detailList">
							<dt class="heading">See:</dt>
							
								<dd>ImpelClass.save</dd>
							
								<dd><a href="../symbols/Criteria.html#getInsertSQL">Criteria#getInsertSQL</a></dd>
							
								<dd><a href="../symbols/Criteria.html#getUpdateSQL">Criteria#getUpdateSQL</a></dd>
							
							</dl>
						

					<hr />
				
					<a name="setAttributes"> </a>
					<div class="fixedFont">
					
					
					<b>setAttributes</b>(<span class="param">attrs</span>)
					
					</div>
					<div class="description">
						Take a list of JSON objects and convert it into attributes for this object. The attributes will be accessible via 
camelCase named getters, e.g., updated_at is accessible via the getUpdatedAt method.

This method should really only be called internally via the hydrate method.
						
						
					</div>
					
					
					
						
							<dl class="detailList">
							<dt class="heading">Parameters:</dt>
							
								<dt>
									<span class="light fixedFont">{Object}</span> <b>attrs</b>
									
								</dt>
								<dd></dd>
							
							</dl>
						
						
						
						
						
						
						

					<hr />
				
					<a name="setOptions"> </a>
					<div class="fixedFont">
					
					
					<b>setOptions</b>(<span class="param">options</span>)
					
					</div>
					<div class="description">
						This is a vestigial method that should be removed as it exists verbatim in the parent class.
						
						
					</div>
					
					
					
						
							<dl class="detailList">
							<dt class="heading">Parameters:</dt>
							
								<dt>
									<span class="light fixedFont">{Object}</span> <b>options</b>
									
								</dt>
								<dd></dd>
							
							</dl>
						
						
						
						
						
						
						

					<hr />
				
					<a name="updateIdFromRS"> </a>
					<div class="fixedFont">
					
					
					<b>updateIdFromRS</b>(<span class="param">rs</span>)
					
					</div>
					<div class="description">
						After the base peer saves the object to the database it wil call this method on the saved object with 
an SQLResultSet, that *should* contain the id of the newly inserted row.
<p>We check for the id, update ourselves with it and take ourselves out of the saving state.</p>
						
						
					</div>
					
					
					
						
							<dl class="detailList">
							<dt class="heading">Parameters:</dt>
							
								<dt>
									<span class="light fixedFont">{SQLResultSet}</span> <b>rs</b>
									
								</dt>
								<dd>- The result set returned by the database query</dd>
							
							</dl>
						
						
						
						
						
						
						
							<dl class="detailList">
							<dt class="heading">See:</dt>
							
								<dd><a href="../symbols/ImpelPeer.html#executeSQL">ImpelPeer#executeSQL</a></dd>
							
								<dd><a href="../symbols/ImpelClass.html#saveOnlyMe">ImpelClass#saveOnlyMe</a></dd>
							
							</dl>
						

					
				
			
			
<!-- ============================== event details ========================= -->		
			
			
			<hr />
		</div>

            <div class="push">&nbsp;</div>
         </div> <!-- end of wrapper -->
         <div id="footer"
        	<div class="fineprint" style="clear:both">
        	    <a class="logo" href="http://www.simulacre.org/"> </a>
        	</div>
    	</div>
    	<script type="text/javascript">
        var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
        document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
        </script>
        <script type="text/javascript">
        try {
        var pageTracker = _gat._getTracker("UA-1727701-7");
        pageTracker._trackPageview();
        } catch(err) {}</script>
	</body>
</html>
